#include<iostream>
using namespace std;
class shape{
    protected:
    public:
 virtual void area(){
 }
virtual void display(){
 }
 virtual ~shape(){
    cout<<"shape desroyed and the order is just reverse the derived classes are killed first and base "<<endl;
 }
};
class rectangle: public shape{
    private:
    int l, b,a;
    public:
    rectangle( int ll=0, int bb=0) {
        l=ll;
        b=bb;
    }
       void area(){
          a=l*b;
          cout<<"calcualting area"<<endl;
    

 }
 void display(){
     cout<<"the area or rectangle is "<<a<<endl;
    
 }
 ~ rectangle(){
    cout<<"rectangle destoryed"<<endl;
 }
 

};
class circle : public shape{
    private:
    int r;float a;
    public:
    circle(int rr=0){
        r=rr;

    }
    void area(){
        a=3.141f*r*r;

 }
 void display(){
    cout<<"the area or circle is "<<a<<endl;
 }
 ~circle(){
    cout<<"circle is destoyed"<<endl;

 }

};
class trapezoid: public shape{
    private:
    int b1,b2,h;
    float a;
    public:
    trapezoid(int bb1=0, int bb2=0,int hh=0)
    {
        b1=bb1;
        b2=bb2;
        h=hh;
    }
    void area(){

        a=0.5*(b1+b2)*h;
 }
 void display(){
     cout<<"the area or trapezoid is "<<a<<endl;
 }
 ~trapezoid(){
    cout<<"the trapezoid destoryed"<<endl;
 }


};

int main(){
    shape s;
   
    shape *ptr[3];
    // rectangle r(5,6);
    //ptr[0]=&r;
   
   ptr[0]=new rectangle(5,7);
   ptr[1]=new circle(5);
   ptr[2]=new trapezoid(1,2,3);
  
   for (int i=0;i<3;i++){
    ptr[i]->area();
    ptr[i]->display();
       delete ptr[i];
   }



}
